#include <iostream>
#include <stack>
#include <string>
#include <cctype>

using namespace std;

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;
}

int applyOperation(int a, int b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
    }
    return 0;
}

string infixToPostfix(string exp) {
    stack<char> operators;
    string postfix = "";
    
    for (int i = 0; i < exp.length(); i++) {
        char ch = exp[i];

        if (isdigit(ch)) {
            while (i < exp.length() && isdigit(exp[i])) {
                postfix += exp[i];
                i++;
            }
            postfix += ' ';
            i--;
        } 
        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            while (!operators.empty() && precedence(operators.top()) >= precedence(ch)) {
                postfix += operators.top();
                postfix += ' ';
                operators.pop();
            }
            operators.push(ch);
        }
    }
    while (!operators.empty()) {
        postfix += operators.top();
        postfix += ' ';
        operators.pop();
    }

    return postfix;
}

int evaluatePostfix(string postfix) {
    stack<int> values;
    
    for (int i = 0; i < postfix.length(); i++) {
        char ch = postfix[i];

        if (isdigit(ch)) {
            int num = 0;
            while (i < postfix.length() && isdigit(postfix[i])) {
                num = num * 10 + (postfix[i] - '0');
                i++;
            }
            values.push(num);
            i--;
        } 
        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            int val2 = values.top(); values.pop();
            int val1 = values.top(); values.pop();
            
            int result = applyOperation(val1, val2, ch);
            values.push(result);
        }
    }
    
    return values.top();
}

int main() {
    string infix;
    cout << "Enter an infix expression (e.g., 3+5-2*3/2): ";
    cin >> infix;

    string postfix = infixToPostfix(infix);
    cout << "Postfix Expression: " << postfix << endl;

    int result = evaluatePostfix(postfix);
    cout << "Result: " << result << endl;

    return 0;
}
